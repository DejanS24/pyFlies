{
    "docs": [
        {
            "location": "/",
            "text": "pyFlies\n\n\nA Domain-Specific Language (DSL) for cognitive experiments modeling.\n\n\n\n\npyFlies\n is a Domain-Specific\nLanguage (DSL) for cognitive experiments modeling. It is meant to be simple to\nlearn and readable. It is designed to be highly readable and easy to write.\n\n\nA code for various run-time platforms can be generated from the experiment\ndescription. Futhermore, model can be directly interpreted if the run-time\nsupports pyFlies.\n\n\nFeatures:\n\n\n\n\nBased on the condition-stimuli-response paradigm.\n\n\nHigh-level. Easy to write and read. Experiments can be defined in minutes!\n\n\nFrom experiment description a source code for various platforms can be\n   automatically generated. Check out generators. If you don't find one you need\n   consider writing one.\n\n\nDeclarative language. Specify \nwhat\n needs to be done and leave \nhow\n part to the pyFlies.\n\n\nGUI editor with syntax highlighting and experiment structure visualization.\n\n\nWritten in Python programming language. Easy to extend.\n\n\nFully open source. GPL license. Hosted on github. Easy to contribute to.\n\n\n\n\nGetting started\n\n\nPrerequsites\n\n\nTo install pyFlies you will need to install following dependencies:\n\n\n\n\nPython\n\n\ntextX\n - will be installed\n   automatically if \npip\n is used.\n\n\nQt 4.8\n - GUI library.\n\n\npyQt4\n - Python\n   binding for Qt.\n\n\ndot\n (part of \nGraphViz\n) - \ndot\n must be on your\n   \nPATH\n for model visualization.\n\n\njinja2\n - for generating source code. Will be\n   installed automatically if \npip\n is used.\n\n\n\n\nIt is planed to make installers for different platforms available in the future.\nIf you want to contribute installer for some platform please se section\n\nContributions\n.\n\n\nInstallation\n\n\npyFlies can be installed using \npip\n installer:\n\n\npip install pyFlies\n\n\n\nor from source:\n\n\ngit clone https://github.com/igordejanovic/pyFlies.git\ncd pyFlies\npython setup.py install\n\n\n\nQuick start\n\n\n\n\n\n\nStart pyFlies GUI.\n\n\npyflies\n\n\n\n\n\n\n\nOpen new file and write your test description:\n\n\nexperiment \"Simon\"\n\"\nA simple behavioural task to assess a Simon effect.\n\nSee also:\nhttp://en.wikipedia.org/wiki/Simon_effect\n\"\n\ntest Simon {\n  conditions {\n    position  color   congruency    response\n\n    left      green   congruent     left\n    left      red     incongruent   right\n    right     green   incongruent   left\n    right     red     congruent     right\n  }\n\n  stimuli{\n    all: shape(rectangle, position position, color color)\n    error: sound(1000)\n    fixation: shape(cross)\n  }\n}\n\n\n\n\n\n\n\nAdd screen definitions:\n\n\nscreen Practice {\n  Simon test\n  ----------\n\n  You will be presented with a colored rectangle positioned\n  left or right.\n  Press LEFT for the GREEN rectangle and right for the red.\n\n  Press SPACE for the practice block.\n}\n\nscreen Real {\n  Simon test\n  ----------\n\n  Now a REAL testing will be performed.\n\n  Press SPACE for the real block.\n}\n\n\n\nScreen definitions are instructions which are presented to the subject\nin between trial series.\n\n\n\n\n\n\nDefine the structure of the experiment:\n\n\nstructure {\n  screen Practice\n  test Simon 1 practice randomize\n  screen Real\n  test Simon 10 randomize\n}\n\n\n\nThe structure gives the order and structure of experiment elements\nexecution. In its most basic form, shown here, it instantiates screens and\ntests in the right order. In this experiment, first a \nPractice\n screen will\nbe displayed. After the user press \nENTER\n key a test execution will be\nperformed for \n1\n set of trials (a set consists of application of all\npossible conditions). In this example, there is \n4\n possible conditions thus\nthis serie will have \n4\n trials. This trial serie will be of practice type\nwhich means that it should be removed from the results. A set of conditions\nwill be \nrandomized\n. After the \nPractice\n screen and serie a \nReal\n screen\nwill be displayed and after the \nENTER\n key press a real serie will be\nperformed by a \n10\n complete repetition of all \n4\n condition (i.e. a \n40\n\ntrials). The trials will be \nrandomized\n.\n\n\nAt this point an experiment is fully described but to be usable we have to\ngenerate the code for the target platform.\n\n\n\n\n\n\nConfigure target generator:\n\n\ntarget Expyriment {\n  output = \"/home/igor/experiments/Simon/\"\n  responses {\n    // see expyriment/misc/constants.py\n    left = K_LEFT\n    right = K_RIGHT\n  }\n\n\n\nThis specification defines that \nExpyriment\n target library is used. The\noutput folder where code should be generated is set. \nresponses\n section\nmaps abstract responses keywords (from the \nconditions\n section) to the\nplatform specific responses (e.g. keys, buttons).\n\n\nMultiple target configurations can be specified.\n\n\n\n\n\n\nFrom the GUI choose \nGenerate code\n action. The generator will produce code\n   for you experiment and the configured target platform.\n\n\n\n\n\n\nRun the experiment and gather data.\n\n\n\n\n\n\nDiscuss, ask questions\n\n\nPlease use \ndiscussion\nforum\n for general\ndiscussions, suggestions etc.\n\n\nIf you have some specific question on textX usage please use\n\nstackoverflow\n.  Just make sure to tag your question\nwith \npyflies\n.\n\n\nScreenshots",
            "title": "Home"
        },
        {
            "location": "/#pyflies",
            "text": "A Domain-Specific Language (DSL) for cognitive experiments modeling.   pyFlies  is a Domain-Specific\nLanguage (DSL) for cognitive experiments modeling. It is meant to be simple to\nlearn and readable. It is designed to be highly readable and easy to write.  A code for various run-time platforms can be generated from the experiment\ndescription. Futhermore, model can be directly interpreted if the run-time\nsupports pyFlies.  Features:   Based on the condition-stimuli-response paradigm.  High-level. Easy to write and read. Experiments can be defined in minutes!  From experiment description a source code for various platforms can be\n   automatically generated. Check out generators. If you don't find one you need\n   consider writing one.  Declarative language. Specify  what  needs to be done and leave  how  part to the pyFlies.  GUI editor with syntax highlighting and experiment structure visualization.  Written in Python programming language. Easy to extend.  Fully open source. GPL license. Hosted on github. Easy to contribute to.",
            "title": "pyFlies"
        },
        {
            "location": "/#getting-started",
            "text": "Prerequsites  To install pyFlies you will need to install following dependencies:   Python  textX  - will be installed\n   automatically if  pip  is used.  Qt 4.8  - GUI library.  pyQt4  - Python\n   binding for Qt.  dot  (part of  GraphViz ) -  dot  must be on your\n    PATH  for model visualization.  jinja2  - for generating source code. Will be\n   installed automatically if  pip  is used.   It is planed to make installers for different platforms available in the future.\nIf you want to contribute installer for some platform please se section Contributions .  Installation  pyFlies can be installed using  pip  installer:  pip install pyFlies  or from source:  git clone https://github.com/igordejanovic/pyFlies.git\ncd pyFlies\npython setup.py install  Quick start    Start pyFlies GUI.  pyflies    Open new file and write your test description:  experiment \"Simon\"\n\"\nA simple behavioural task to assess a Simon effect.\n\nSee also:\nhttp://en.wikipedia.org/wiki/Simon_effect\n\"\n\ntest Simon {\n  conditions {\n    position  color   congruency    response\n\n    left      green   congruent     left\n    left      red     incongruent   right\n    right     green   incongruent   left\n    right     red     congruent     right\n  }\n\n  stimuli{\n    all: shape(rectangle, position position, color color)\n    error: sound(1000)\n    fixation: shape(cross)\n  }\n}    Add screen definitions:  screen Practice {\n  Simon test\n  ----------\n\n  You will be presented with a colored rectangle positioned\n  left or right.\n  Press LEFT for the GREEN rectangle and right for the red.\n\n  Press SPACE for the practice block.\n}\n\nscreen Real {\n  Simon test\n  ----------\n\n  Now a REAL testing will be performed.\n\n  Press SPACE for the real block.\n}  Screen definitions are instructions which are presented to the subject\nin between trial series.    Define the structure of the experiment:  structure {\n  screen Practice\n  test Simon 1 practice randomize\n  screen Real\n  test Simon 10 randomize\n}  The structure gives the order and structure of experiment elements\nexecution. In its most basic form, shown here, it instantiates screens and\ntests in the right order. In this experiment, first a  Practice  screen will\nbe displayed. After the user press  ENTER  key a test execution will be\nperformed for  1  set of trials (a set consists of application of all\npossible conditions). In this example, there is  4  possible conditions thus\nthis serie will have  4  trials. This trial serie will be of practice type\nwhich means that it should be removed from the results. A set of conditions\nwill be  randomized . After the  Practice  screen and serie a  Real  screen\nwill be displayed and after the  ENTER  key press a real serie will be\nperformed by a  10  complete repetition of all  4  condition (i.e. a  40 \ntrials). The trials will be  randomized .  At this point an experiment is fully described but to be usable we have to\ngenerate the code for the target platform.    Configure target generator:  target Expyriment {\n  output = \"/home/igor/experiments/Simon/\"\n  responses {\n    // see expyriment/misc/constants.py\n    left = K_LEFT\n    right = K_RIGHT\n  }  This specification defines that  Expyriment  target library is used. The\noutput folder where code should be generated is set.  responses  section\nmaps abstract responses keywords (from the  conditions  section) to the\nplatform specific responses (e.g. keys, buttons).  Multiple target configurations can be specified.    From the GUI choose  Generate code  action. The generator will produce code\n   for you experiment and the configured target platform.    Run the experiment and gather data.    Discuss, ask questions  Please use  discussion\nforum  for general\ndiscussions, suggestions etc.  If you have some specific question on textX usage please use stackoverflow .  Just make sure to tag your question\nwith  pyflies .",
            "title": "Getting started"
        },
        {
            "location": "/#screenshots",
            "text": "",
            "title": "Screenshots"
        },
        {
            "location": "/user_guide/conditions/",
            "text": "Conditions\n\n\n\n\npyFlies is based on the condition-stimuli-response paradigm. Each test\ndescription must specify a fixed set of conditions given in \nconditions\n\nsection. For each condition a single response is expected.\n\n\nConditions section is given as a table where first row represents the name of\nthe condition variables whose values are given in the corresponding columns of\nthe subsequent rows.\nThe name of the variables are arbitrary but one of them should be \nresponse\n.\nThere is no constraint on how many condition variable can be specified or how\nmany values for each variable can be given.\n\n\nFor example:\n\n\nconditions {\n    position    color   congruency    response\n\n    left        green   congruent     left\n    left        red     incongruent   right\n    right       green   incongruent   left\n    right       red     congruent     right\n}\n\n\n\nIn this example there is two independent condition variables (\nposition\n and\n\ncolor\n) with two possible value each, forming in total 4 conditions. Third\nvariable \ncongruency\n is dependent and is given here just for the convenience.\nThe last one \nresponse\n is mandatory and gives an abstract representation of the\nexpected response. This abstract representation is mapped to concrete platform\nspecific representation by the target configuration.\n\n\nThe values of condition variables can be used in stimuli definition to\nparametrize stimuli.",
            "title": "Conditions"
        },
        {
            "location": "/user_guide/conditions/#conditions",
            "text": "pyFlies is based on the condition-stimuli-response paradigm. Each test\ndescription must specify a fixed set of conditions given in  conditions \nsection. For each condition a single response is expected.  Conditions section is given as a table where first row represents the name of\nthe condition variables whose values are given in the corresponding columns of\nthe subsequent rows.\nThe name of the variables are arbitrary but one of them should be  response .\nThere is no constraint on how many condition variable can be specified or how\nmany values for each variable can be given.  For example:  conditions {\n    position    color   congruency    response\n\n    left        green   congruent     left\n    left        red     incongruent   right\n    right       green   incongruent   left\n    right       red     congruent     right\n}  In this example there is two independent condition variables ( position  and color ) with two possible value each, forming in total 4 conditions. Third\nvariable  congruency  is dependent and is given here just for the convenience.\nThe last one  response  is mandatory and gives an abstract representation of the\nexpected response. This abstract representation is mapped to concrete platform\nspecific representation by the target configuration.  The values of condition variables can be used in stimuli definition to\nparametrize stimuli.",
            "title": "Conditions"
        },
        {
            "location": "/user_guide/stimuli/",
            "text": "Stimuli\n\n\n\n\nEach test description must specify a \nstimuli\n section.\n\n\nFor example:\n\n\nstimuli{\n  all: shape(rectangle, position position, color color)\n  error: sound(1000)\n  correct: sound(500)\n  fixation: shape(cross)\n}\n\n\n\nstimuli\n section contains a list of stimuli definition statements.\nEach statement is given in the form:\n\n\n  \ncondition match expr.\n: \nstimuli definition\n\n\n\n\nWhere \ncondition match expr.\n is either an expression that will match one or\nmore condition from the condition section or a special expression that will match\nsome specific event during the experiment execution.\n\n\nStimuli defined after colon in stimuli definition statement are given in the\nform of list of stimulus definition. Stimuli are presented to the user in the\norder they are defined.\n\n\nStimuli types\n\n\nAt the moment pyFlies recognizes following stimulus types:\n\n\n\n\nshape\n - displays a shape defined in first parameter with the given color and location,\n\n\nimage\n - displays an image from file\n\n\ntext\n - displays given text at a specific location,\n\n\nsound\n - produces a tone of the given frequency and duration,\n\n\naudio\n - plays given audio file\n\n\n\n\nEach stimuli type has at least one mandatory parameter and may have additional\noptional parameters.  Optional parameters always start with the keywords which\nnames them, thus their order is arbitrary. In the previous example for \nall\n\ncondition a shape stimuli will be presented. Shape type is \nrectangle\n, its\nposition will be the value of \nposition\n condition variable for the current\ncondition and its color will be the value of \ncolor\n condition variable for the\ncurrent condition.\n\n\nshape\n\n\nimage\n\n\ntext\n\n\nsound\n\n\naudio",
            "title": "Stimuli"
        },
        {
            "location": "/user_guide/stimuli/#stimuli",
            "text": "Each test description must specify a  stimuli  section.  For example:  stimuli{\n  all: shape(rectangle, position position, color color)\n  error: sound(1000)\n  correct: sound(500)\n  fixation: shape(cross)\n}  stimuli  section contains a list of stimuli definition statements.\nEach statement is given in the form:     condition match expr. :  stimuli definition   Where  condition match expr.  is either an expression that will match one or\nmore condition from the condition section or a special expression that will match\nsome specific event during the experiment execution.  Stimuli defined after colon in stimuli definition statement are given in the\nform of list of stimulus definition. Stimuli are presented to the user in the\norder they are defined.",
            "title": "Stimuli"
        },
        {
            "location": "/user_guide/stimuli/#stimuli-types",
            "text": "At the moment pyFlies recognizes following stimulus types:   shape  - displays a shape defined in first parameter with the given color and location,  image  - displays an image from file  text  - displays given text at a specific location,  sound  - produces a tone of the given frequency and duration,  audio  - plays given audio file   Each stimuli type has at least one mandatory parameter and may have additional\noptional parameters.  Optional parameters always start with the keywords which\nnames them, thus their order is arbitrary. In the previous example for  all \ncondition a shape stimuli will be presented. Shape type is  rectangle , its\nposition will be the value of  position  condition variable for the current\ncondition and its color will be the value of  color  condition variable for the\ncurrent condition.  shape  image  text  sound  audio",
            "title": "Stimuli types"
        },
        {
            "location": "/user_guide/coordinate_system/",
            "text": "",
            "title": "Coordinate system"
        },
        {
            "location": "/user_guide/screens/",
            "text": "",
            "title": "Screens"
        },
        {
            "location": "/user_guide/test_structure/",
            "text": "",
            "title": "Test structure"
        },
        {
            "location": "/user_guide/generator_config/",
            "text": "",
            "title": "Generator configuration"
        },
        {
            "location": "/about/release_notes/",
            "text": "",
            "title": "Release Notes"
        },
        {
            "location": "/about/contributing/",
            "text": "pyFlies\nis open for contributions. You can contribute code, documentation, tests, bug reports.\nIf you plan to make a contribution it would be great if you first announce that on the discussion forum.\n\n\nFor bug reports please use github \nissue tracker\n.\n\n\nFor code/doc/test contributions do the following:\n\n\n\n\nFork the \nproject on github\n.\n\n\nClone your fork.\n\n\nMake a branch for the new feature and switch to it.\n\n\nMake one or more commits.\n\n\nPush your branch to github.\n\n\nMake a pull request. I will look at the changes and if everything is ok I will pull it in.\n\n\n\n\n\n\nNote\n\n\nFor code contributions please try to adhere to the \nPEP-8\nguidelines\n.  Although I am not\nstrict in that regard it is useful to have a common ground for coding style.\nTo make things easier use tools for code checking (PyLint, PyFlakes, pep8\netc.).",
            "title": "Contributing"
        },
        {
            "location": "/about/license/",
            "text": "Copyright (c) 2015 Igor Dejanovi\u0107\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see \nhttp://www.gnu.org/licenses/\n.",
            "title": "License"
        }
    ]
}