experiment "Simon Test"
"
This is an experiment description.
"

test simon {

  conditions {

    color   position    response

    blue    left        right
    blue    right       right
    green   left 		left
    green   right       left
    red     left        right
    red     right       right

  }


  stimuli {

    // condition match: stimulus description

    //position=right: shape(rectangle, position rightcenter, size small, color $color)
    //position=left: shape(rectangle, position leftcenter, size small, color $color)
    
    // stimuli description are merged for condition match that matches
    // more that one condition
    // For example, this will play sound at condition 1 and display shape on the left side
    1: sound(1000)

    // To match any condition use keyword any
    // any: sound(2000)
    
    // Besides "any" there are several special conditions:
    // fixation - used to specify fixation stimulus
    // error - stimulus used to indicate error
    // correct - stimulus used to indicate correct response
    
    fixation: shape(cross, size tiny, color white)
    error: sound(2000, 100)

    // Different possibilities
    1: shape(rectangle, 1000, position left, size small, color blue)
    2: image("someimage.jpg", size large)
    3: sound(1000)
    4: audio("audiofile.mp3")
    any: image("someimage.png", size large)
    color=green and position=right: image("someimage.png", size large)
    color=red and position=right: image("someimage.png", position -25 -25, size 10 10)

  }

  // Timing
  timing 2000 3000

}

text Introduction {
  content
  Simon test
  ----------
  
  You will be presented with the square in different colors positioned left or right.
  Press LEFT for GREEN square and RIGHT otherwise.
  endcontent

  response = any  // special response type that matches any response possible on the platform
}

structure {

  randomize {
	sequence {
		text Introduction
		test simon 3 practice
	}
	sequence {
		// Just to show that blocks can be nested.
		text Introduction
		test simon 10 randomize
	}
  }
}

/*
target jsPsych {
  output = 'some/directory/'

  // jsPsych specific settings

  responses {
    // Mapping responses form conditions table to
    // platform specific responses
    left = 37
    right = 39
  }
}
*/
target Expyriment {
  // Target folder where test should be generated
  output = "/home/igor/tmp/expgen/"

  responses {
    left = 10
    right = 11
  }
  // Generator specific settings (e.g. Expyriment)
  // Anything available here should be specified by generator
  response_device = keyboard
  
}