experiment "Simon Test"
"
This is an experiment description.
"

test simon {

  conditions {

    color   position    response

    blue    left        right
    blue    right       right
    green   left 		left
    green   right       left
    red     left        right
    red     right       right

  }


  stimuli {

    // condition match: stimulus description

    position=right: shape(rectangle, position right, size small, color red)
    position=left: shape(rectangle, position left, size small, color black)
    
    // stimuli description are merged for condition match that matches
    // more that one condition
    // For example, this will play sound at condition 1 and display shape on the left side
    1: sound(1000)

    // To match all condition use special condition "all"
    all: sound(2000)
    
    // To put more than one stimuli on the same condition
    // repeat that condition with another stimulus
    all: image("someimage.png", size large)
    
    // Besides "all" there are several special conditions:
    // fixation - used to specify fixation stimulus
    // error - stimulus used to indicate error
    // correct - stimulus used to indicate correct response
    
    fixation: shape(cross, size tiny, color white)
    error: sound(2000, 100)
    correct: sound(1000)

    // Different possibilities
    1: shape(rectangle, 1000, position left, size small, color blue)
    2: image("someimage.jpg", size large)
    3: sound(1000)
    4: audio("audiofile.mp3")
    color=green and position=right: image("someimage.png", size large)
    color=red and position=right: image("someimage.png", position -25 -25, size 10 10)

  }

  // Timing
  timing 2000 3000

}

screen Introduction {
  content
  Simon test
  ----------
  
  You will be presented with the square in different colors positioned left or right.
  Press LEFT for GREEN square and RIGHT otherwise.
  endcontent

  response = any  // special response type that matches any response possible on the platform
}

// Subject information can be specified with subject block type
subject subject_data {
  string full_name "First and last name"
  int age
  [Male, Female] gender "Gender"
}

// The structure of the experiment is defined in "structure" block
structure {

  // At the start of the experiment collect subject data
  subject subject_data

  // Randomize block will randomize all its children
  randomize {
  	
  	// Introduction and practice are put in sequence to
  	// preserve their order
	sequence {
		screen Introduction
		
		// Instantiate test type with the name of the type,
		// number of trial sets, indicator if it is practice
		// and optional randomization keyword
		test simon 3 practice
	}
	
	sequence {
		// Just to show that blocks can be nested.
		screen Introduction
		test simon 10 randomize
	}
  }
}

/*
target jsPsych {
  output = 'some/directory/'

  // jsPsych specific settings

  responses {
    // Mapping responses form conditions table to
    // platform specific responses
    left = 37
    right = 39
  }
}
*/
target Expyriment {
  // Target folder where test should be generated
  output = "/home/igor/tmp/expgen/"

  responses {
    left = 10
    right = 11
  }
  // Generator specific settings (e.g. Expyriment)
  // Anything available here should be specified by generator
  response_device = keyboard
  
}