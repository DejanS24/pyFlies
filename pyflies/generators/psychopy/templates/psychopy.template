{# vim: filetype=django tabstop=4 shiftwidth=4 expandtab
-#}
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
{{m.name}}
---------------------

{{m.description}}

This test was generated by pyFlies(https://github.com/igordejanovic/pyFlies) on {{datetime}}
If you are going to regenerate this file from the pyFlies model again
do not edit it manually or else your manual changed will be lost.
"""
import os
import time
import random
import csv
from psychopy import core, visual, sound, event

win = visual.Window(color="black", fullscr=True)

{%- macro stimulus(s) %}
  {%- if s._typename == "Shape" -%}
    {%- if s.shape == "circle" -%}
visual.Circle(size=({{s.width}}, {{s.height}}), colour=misc.constants.{{color_map[s.color]}}, position=({{s.x}}, {{s.y}}))
    {%- elif s.shape == "rectangle" -%}
visual.Rect(win, pos=({{s.x/100}},{{s.y/100}}), fillColor="{{s.color}}")
    {%- elif s.shape == "cross" -%}
visual.Line(win, start=({{s.x/100-0.1}},{{s.y/100}}), end=({{s.x/100+0.1}}, {{s.y/100}}), lineColor="{{s.color}}"),
visual.Line(win, start=({{s.x/100}},{{s.y/100-0.1}}), end=({{s.x/100}}, {{s.y/100+0.1}}), lineColor="{{s.color}}")
    {%- endif %}
  {%- elif s._typename == "Text" -%}
visual.TextStim(win, text="{{s.text}}", height={{s.size/100}}, color="{{s.color}}", pos=({{s.x}}, {{s.y}}))
  {%- elif s._typename == "Image" %}
visual.Picture("{{s.file}}")
  {%- elif s._typename == "Sound" %}
sound.Sound({{s.frequency}})
  {%- elif s._typename == "Audio" %}
sound.Audio("{{s.file}}")
  {%- endif %}
{%- endmacro %}


{% for b in m.blocks -%}
  {%- if b._typename == "ScreenType" %}

# Screen {{b.name}}
screen_{{b.name}} = [visual.TextStim(
    win,
    text="""
{{b.content|striptabs}}
    """,
    alignHoriz='center')]
  {% elif b._typename == "TestType" %}

# {{b.name}} test
{{b.name}}_conditions = [
    {%- for cond in b.conditions.conditions %}
    {
        'condidx': {{loop.index}},
        {%- for varValue in cond.varValues %}
        '{{b.conditions.varNames[loop.index0]}}': '{{varValue}}',
        {%- endfor %}
    },
    {%- endfor %}
]

{{b.name}}_varNames = [
    {% for var in b.conditions.varNames %}'{{var}}'{% if not loop.last %}, {% endif %}
    {%- endfor %}
]

# Stimuli for each condition of {{b.name}} test
{{b.name}}_condition_stimuli = [
    {%- for cond in b.conditions.conditions %}
        [
        {% for stimuli in cond.stimuli_for_cond -%}
            {%- for s in stimuli -%}
            {{ stimulus (s) }}{% if not loop.last %},
            {% endif %}
            {%- endfor -%}
        {% endfor %}
        ]{% if not loop.last %},
        {%- endif -%}
    {%- endfor %}
    ]

# Fixation stimuli for {{b.name}}
{{b.name}}_fixation = [
        {%- for s in b.fix %}
            {{ stimulus (s) }}{% if not loop.last %},
            {% endif %}
        {%- endfor %}
]

# Error stimuli for {{b.name}}
{{b.name}}_error = [
        {%- for s in b.error %}
            {{ stimulus (s) }}{% if not loop.last %},
            {% endif %}
        {%- endfor %}
]

# Correct stimuli for {{b.name}}
{{b.name}}_correct = [
        {%- for s in b.correct %}
            {{ stimulus (s) }}{% if not loop.last %},
            {% endif %}
        {%- endfor %}
]
  {%- endif %}
{%- endfor %}

def present_stimuli(stimuli):
    """
    Presents stimuli given in 'stimuli' list.
    """
    for s in stimuli:
        if isinstance(s, visual.ShapeStim) or isinstance(s, visual.TextStim):
            s.draw()
        elif isinstance(s, sound.Sound):
            s.play()
        else:
            Exception('Unknown stimulus type - {}'.format(str(s)))

    win.flip()

def run_block(folder, test_name, cond_vars, conditions, condition_stimuli,
              repeat, practice, randomize,
              fixation, error, correct):
    """
    Runs one block of trials for the given parameters.
    """
    # Run test for (repeat x number of condition) trials
    # If randomized, randomize each condition subset
    trials = []
    for i in range(repeat):
        cond_blk = list(conditions)
        if randomize:
            random.shuffle(cond_blk)
        trials.extend(cond_blk)

    timestr = time.strftime("%Y%m%d-%H%M%S")
    fileName = '%s-%s%s.csv' % (test_name, "practice-" if practice else "",timestr)
    csvfile = open(os.path.join(folder, fileName), 'wt')
    try:
        writer = csv.writer(csvfile)

        # Write header
        header = ['ord']
        header.extend(cond_vars)
        header.extend(['actual_response', 'RT', 'error'])
        writer.writerow(header)
        order = 0
        for trial in trials:
            order += 1
            condidx = trial['condidx'] - 1

            # Draw fixation first
            present_stimuli(fixation)
            core.wait(1)

            # Draw condition stimuli
            present_stimuli(condition_stimuli[condidx])
            clock = core.Clock()

            # Wait for response for predefined period of time
            key, rt = event.waitKeys(timeStamped=clock)[0]

            if key in ['escape', 'q']:
                csvfile.close()
                core.quit()

            # Write data
            data_row = [order]
            for var in header[1:-3]:
                data_row.append(trial[var])
            data_row.extend([key, rt * 1000, int(key != trial['response'])])
            writer.writerow(data_row)
            print('key:', key, rt)

            # If error response present error stimuli
            if key != trial['response']:
                present_stimuli(error)
            else:
                present_stimuli(correct)
    finally:
        csvfile.close()

# Run experiment
# Create folder for experiment results.
timestr = time.strftime("%Y%m%d-%H%M%S")
exp_folder = '{{m.name}}-%s' % timestr
os.mkdir(exp_folder)

{%- for e in m.structure.elements %}
    {%- if e._typename == "ScreenInstance" %}

present_stimuli(screen_{{e.type.name}})
event.waitKeys()
    {%- elif e._typename == "TestInstance" %}

run_block(exp_folder, "{{e.type.name}}", {{e.type.name}}_varNames,
          {{e.type.name}}_conditions, {{e.type.name}}_condition_stimuli,\
          {{e.trials}}, {% if e.practice %}True{% else %}False{% endif %},
          {% if e.randomize %}True{% else %}False{% endif %},
          {{e.type.name}}_fixation, {{e.type.name}}_error, {{e.type.name}}_correct)
    {%- endif %}
{%- endfor %}

win.close()
