"""
pyFlies code generators transforms pyFlies experiment models to
different run-time platforms.
"""

import os
import imp
import shutil

from pyflies.exceptions import PyFliesException

PYFLIES_GENERATED = '.pyflies.generated'
GENERATORS_DIR='generators'
MANUAL_DIR = 'manual'

# A dict of generator modules keyed by generator names
_generators = {}

def load_generators():
    """
    Search for and loads all generators.
    """
    if not _generators:

        # Each dir in generators folder is considered to be a generator for
        # particular platform. The name of the generator is define in the generator
        # __init__ module
        dir_names = [f for f in os.listdir(GENERATORS_DIR) if os.path.isdir(f)]
        for gen in dir_names:
            (moduleFile, pathname, description) = imp.find_module('__init__', \
                    [os.path.join(GENERATORS_DIR, gen)])
            gen_module = imp.load_module(moduleName, moduleFile, pathname, description)

            _generators[gen_module.name] = gen_module

def generator_names():
    """
    Return a list of generator names.
    """
    load_generators()
    return _generators.keys()

def generate(generator_name, model, target_folder):
    """
    Do some sanity checks for target folder. Delete the content of
    target folder leaving manually written files, and calls generator.

    Args:
        generator_name(src): A generator name as defined by the 'name'
            attribute of the generator module.
        model(pyFlies model):
        target_folder(src): The name of the target folder where code should
            be generated.
    """

    # Sanity check. If target folder does not exists or has .pyflies.generated
    # file inside
    # if will be deleted before generation. Else an exception will be raised.
    pyflies_gen = os.path.join(target_folder, PYFLIES_GENERATED)
    if os.path.exists(target_folder):
        if os.path.exists(pyflies_gen):
            # Remove content of target folder. Leave src-gen folder and 
            # pyflies.generated file
            for to_delete in os.listdir(target_folder):
                if to_delete not in [MANUAL_DIR, PYFLIES_GENERATED]:
                    shutil.rmtree(os.path.join(target_folder, to_delete))
        else:
            raise PyFliesException(
                    "Target folder does not have a '.pyflies.generated' file!"+\
                    " It is not generated by pyflies.")
    else:
        os.makedirs(os.path.join(target_folder, MANUAL_DIR))
        open(os.path.join(target_folder, '.pyflies.generated')).close()

    # Copy non-template files
    shutil.copytree('./templates/', target_folder,\
        ignore=lambda src, names: [x for x in names if x.endswith('.template')])
    _generators[generator_name].generate(model, target_folder)

