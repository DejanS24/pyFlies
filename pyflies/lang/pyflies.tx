/*
  This is a textX specification of pyFlies DSL for Reaction Time test
  experiments definition.
  Author: Igor R. Dejanovic <igor DOT dejanovic AT gmail DOT com>
  Copyright: (c) 2014 Igor R. Dejanovic <igor DOT dejanovic AT gmail DOT com>
  License: MIT License
*/

PyFliesModel:
  ("basepath" basepath=STRING)?
  elements+=ModelElement
;

ModelElement:
  TestDef|Experiment|Text|Subject
;

TestDef:
  "test" name=ID "{"
    (conditions = Conditions)?
    (stimuli = Stimuli)?

    ( ("tmin" "=" tmin=INT)|
    ("tmax" "=" tmax=INT)|
    ("tduration" "=" tduration=INT))*

  "}"
;

Conditions:
  'conditions' '{'
    // Parameter names are in the first line of condition specification
    paramNames+=ID[eolterm]    // match param names until end of line
    // The rest of the description are conditions, one per line
    // The order of condition values match the param name positions.
    conditions+=Condition
  '}'
;

Condition:
  condition+=ID[eolterm]  // match values until end of line
;

Stimuli:
  'stimuli' '{'
    stimuli+=Stimulus
  '}'
;

Stimulus:
  // Stimulus is given in the form of
  // condition match expression : stimulus definition
  conditionMatch=ConditionMatch ':' stimulusDef=StimulusDef
;

ConditionMatch:
  expression=ConditionMatchExpression
;
ConditionMatchExpression:
  // TODO: INT|Expression
  INT
;

/*
Expression(
  brackets=(),
  infixBinary=[Addition +, Substraction -, Multiplication *, Division /],
  unaryPrefix=[Negation -]
  presendence=[^, [*, /], [+, -]]
  assocRight=[^]
  operands=ID|FLOAT|INT
  )


ConditionMatchExpression expression:
    brackets=["(", ")"],
    infixBinary=[And 'and', Or 'or', Equals '='],
    prefixUnary=[Not 'not'],
    presendence=[Equals, Not, And, Or],
    operandMatch=ID
;
*/


StimulusDef:
  Image|Shape|Sound|Audio
;

Image:
  'image' '(' file=STRING
   (',' (('position' position=Position)|
      ('size' size=Size))*[','])?
  ')'
;

Shape:
  'shape' '(' shape=ShapeType
   (',' (('position' position=Position)|
      ('color' color=Color)|
      ('size' size=Size))*[','])?
  ')'
;

ShapeType:
  "rectangle"|"circle"|"triangle"
;

Sound:
  'sound' '(' frequency=INT ')'
;

Audio:
  'audio' '(' file=STRING ')'
;

Color:
  "red"|"green"|"blue"|"yellow"|"white"|"black"
;

Size:
  ((descriptive=DescriptiveSize)|
  (x=INT ',' y=INT)|
  (both=INT))
;

DescriptiveSize:
  "tiny"|"small"|"normal"|"large"|"huge"|"stratch"
;

Position:
  ((descriptive=PositionDescriptive)|
  (x=INT ',' y=INT))
;

PositionDescriptive:
  "center"|"left"|"right"|"top"|"bottom"|"farLeft"|"farRight"|"farTop"|"farBottom"|
  "topLeft"|"topRight"|"bottomLeft"|"bottomRight"|
  "farTopLeft"|"farTopRight"|"farBottomLeft"|"farBottomRight"
;


Block:
  Sequence|Randomize
;

TestReference:
  'test' test=[TestDef] trials=INT practice?="practice"
;

TextReference:
  'text' text=[Text]
;

SubjectReference:
  'subject' subject=[Subject]
;

Reference:
  TestReference|TextReference|SubjectReference
;

ExperimentElement:
  Reference|Block
;


Experiment:
  'experiment' (name=STRING)? '{'
    elements*=ExperimentElement
  '}'
;

Sequence:
  'sequence' '{'
    elements*=ExperimentElement
  '}'
;

Randomize:
  'randomize' '{'
    elements*=ExperimentElement
  '}'
;

Text:
  'text' name=ID "{"
    ('content'
      content=/(.|\n)*?(?=endcontent)/
    'endcontent')

    ('response' '=' ID)?

  '}'
;

Subject:
  'subject' name=ID '{'
    attribute+=SubjectAttribute
  '}'
;

SubjectAttribute:
  type=SubjectAttributeType name=ID (label=STRING)?
;

SubjectAttributeType:
  "int"|"string"|"float"|Enum
;

Enum:
  '[' values+=ID[','] ']'
;

// Special rule for comments
Comment:
  /\/\/.*$/|/\/\*(.|\n)*?\*\//  // Non-greedy match of block component content
;

